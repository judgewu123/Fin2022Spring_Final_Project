<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAADiAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA4gAAAK4AAADWAAAA+wAAAP8AAAD/AAAA/wAAAP8AAADpAAAAzAAAAOkAAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAANUAAADVAAAA+wAAAP8AAAD/AAAA/wAAAP8AAADpAAAAzAAAAOkAAAD/AAAA/wAA
        AP8AAAD/AAAA+wAAANYAAACuAAAABQAAADUAAADqAAAA/wAAAP8AAAD/AAAA/wAAAJUAAAALAAAAlQAA
        AP8AAAD/AAAA/wAAAP8AAADqAAAAMwAAADMAAADqAAAA/wAAAP8AAAD/AAAA/wAAAJUAAAALAAAAlQAA
        AP8AAAD/AAAA/wAAAP8AAADqAAAANQAAAAUAAAAAAAAAJwAAAOgAAAD/AAAA/wAAAP8AAAD/AAAAjQAA
        AAAAAACNAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAkAAAAJAAAAOgAAAD/AAAA/wAAAP8AAAD/AAAAjQAA
        AAAAAACNAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAnAAAAAAAAAAAAAAAnAAAA6AAAAP8AAAD/AAAA/wAA
        AP8AAACOAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAAACUAAAAlAAAA6AAAAP8AAAD/AAAA/wAA
        AP8AAACOAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAAACcAAAAAAAAAAAAAACcAAADoAAAA/wAA
        AP8AAAD/AAAA/wAAAI4AAAAAAAAAjgAAAP8AAAD/AAAA/wAAAP8AAADoAAAAJQAAACUAAADoAAAA/wAA
        AP8AAAD/AAAA/wAAAI4AAAAAAAAAjgAAAP8AAAD/AAAA/wAAAP8AAADoAAAAJwAAAAAAAAAAAAAAJwAA
        AOgAAAD/AAAA/wAAAP8AAAD/AAAAjgAAAAAAAACOAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAlAAAAJQAA
        AOgAAAD/AAAA/wAAAP8AAAD/AAAAjgAAAAAAAACOAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAnAAAAAAAA
        AAAAAAAnAAAA6AAAAP8AAAD/AAAA/wAAAP8AAACOAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6QAA
        ACYAAAAlAAAA6AAAAP8AAAD/AAAA/wAAAP8AAACOAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAA
        ACcAAAAAAAAAAAAAACcAAADoAAAA/wAAAP8AAAD/AAAA/wAAAI4AAAAAAAAAhgAAAP8AAAD/AAAA/wAA
        AP8AAADkAAAAIQAAACYAAADoAAAA/wAAAP8AAAD/AAAA/wAAAI4AAAAAAAAAjgAAAP8AAAD/AAAA/wAA
        AP8AAADoAAAAJwAAAAAAAAAAAAAAJwAAAOgAAAD/AAAA/wAAAP8AAAD/AAAAjgAAAAAAAAAoAAAAegAA
        AIAAAACAAAAAgQAAAFoAAAAEAAAAJwAAAOgAAAD/AAAA/wAAAP8AAAD/AAAAjgAAAAAAAACOAAAA/wAA
        AP8AAAD/AAAA/wAAAOgAAAAnAAAAAAAAAAAAAAAnAAAA6AAAAP8AAAD/AAAA/wAAAP8AAACOAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA6AAAAP8AAAD/AAAA/wAAAP8AAACOAAAAAAAA
        AI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAAACcAAAAAAAAAAAAAACgAAADpAAAA/wAAAP8AAAD/AAAA/wAA
        AI8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgAAADoAAAA/wAAAP8AAAD/AAAA/wAA
        AI4AAAAAAAAAjgAAAP8AAAD/AAAA/wAAAP8AAADoAAAAJwAAAAAAAAAAAAAAHQAAANQAAAD7AAAA+QAA
        APoAAAD6AAAAdwAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAKAAAAOgAAAD/AAAA/wAA
        AP8AAAD/AAAAjgAAAAAAAACOAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAnAAAAAAAAAAAAAAACAAAALwAA
        AEoAAABJAAAASQAAAEQAAAATAAAAAAAAAAAAAAA3AAAAmAAAAK4AAABtAAAADgAAAAAAAAAoAAAA6AAA
        AP8AAAD/AAAA/wAAAP8AAACOAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAAACcAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAAANoAAAD/AAAA/wAAAP8AAACGAAAAAAAA
        ACgAAADoAAAA/wAAAP8AAAD/AAAA/wAAAI4AAAAAAAAAjgAAAP8AAAD/AAAA/wAAAP8AAADoAAAAJwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB3AAAA/wAAAP8AAAD/AAAA/wAA
        ANwAAAAZAAAAJgAAAOsAAAD/AAAA/wAAAP8AAAD/AAAAjwAAAAAAAACOAAAA/wAAAP8AAAD/AAAA/wAA
        AOgAAAAnAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAZAAAAEAAAAAAAAAACAAAAMwAAAL8AAAD/AAAA/wAA
        AP8AAAD/AAAA3gAAABwAAAATAAAAtQAAAOIAAADgAAAA4QAAAN4AAABgAAAAAAAAAI4AAAD/AAAA/wAA
        AP8AAAD/AAAA6AAAACcAAAAAAAAAAAAAAAAAAAAiAAAAoQAAANsAAADIAAAAdAAAAJUAAADsAAAA/wAA
        APsAAAD/AAAA/wAAAP8AAADkAAAAOAAAAAAAAAARAAAAHwAAAB8AAAAfAAAAHAAAAAUAAAAAAAAAjgAA
        AP8AAAD/AAAA/wAAAP8AAADoAAAAJwAAAAAAAAAAAAAABwAAAKYAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ANsAAAB7AAAAWgAAALEAAADEAAAAwAAAAP4AAADQAAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACOAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAnAAAAAAAAAAAAAAAgAAAA4wAAAP8AAAD/AAAA/wAA
        AP8AAACyAAAAIQAAAAAAAAAAAAAABgAAAAsAAAARAAAAlwAAAP8AAADRAAAAMgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAI4AAAD/AAAA/wAAAP8AAAD/AAAA6AAAACcAAAAAAAAAAAAAABkAAADXAAAA/wAA
        AP8AAAD/AAAA/wAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAlwAAAP8AAADQAAAARAAA
        AD8AAAAxAAAABgAAAAAAAAAAAAAAjgAAAP8AAAD/AAAA/wAAAP8AAADoAAAAKAAAAAAAAAAAAAAAAAAA
        AHUAAAD4AAAA/wAAAP8AAADLAAAAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAAlwAA
        AP0AAADyAAAA9QAAAO0AAACOAAAADAAAAAAAAACKAAAA/wAAAP8AAAD/AAAA/wAAAOgAAAAlAAAAAAAA
        AAAAAAAAAAAABwAAAFQAAACSAAAAfQAAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAcAAAA2QAAAP8AAAD/AAAA/wAAAPsAAABYAAAAAAAAADYAAACWAAAAnAAAAJwAAACdAAAAcgAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACIAAADkAAAA/wAAAP8AAAD/AAAA/wAAAIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAMkAAAD/AAAA/wAAAP8AAAD/AAAAqQAAABIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAOAAAAD/AAAA9gAAAO0AAAD/AAAAtwAA
        ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQAAAFsAAABHAAAAOgAA
        ALcAAAD/AAAA3AAAAGoAAAB7AAAAkwAAAFQAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAEwAAAIkAAAD0AAAA/gAAAP8AAAD/AAAA+AAAAHUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAJUAAAD/AAAA/wAAAP8AAAD/AAAA1wAAABkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgQAAAP8AAAD/AAAA/wAAAP8AAADjAAAAIAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAA7gAAAP8AAAD/AAAA/wAA
        AKUAAAAHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAABtAAAA5gAA
        APkAAAC3AAAAJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAB4AACAfAAAwP4AAP/+
        AAH//gAA//8AAP//8AD///gA///8AP///AA=
</value>
  </data>
</root>